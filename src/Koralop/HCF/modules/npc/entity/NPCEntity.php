<?php

namespace Koralop\HCF\modules\npc\entity;

use Koralop\HCF\factions\Faction;
use Koralop\HCF\HCFLoader;
use Koralop\HCF\HCFPlayer;
use pocketmine\entity\Human;
use pocketmine\level\particle\FloatingTextParticle;
use pocketmine\math\Vector3;
use pocketmine\Server;
use pocketmine\utils\Config;
use pocketmine\utils\TextFormat;

/**
 * Class NPCEntity
 * @package Koralop\HCF\modules\npc\entity
 */
class NPCEntity extends Human
{

    /** @var array */
    protected array $text = [];

    /**
     * @return string
     */
    public function getType(): string
    {
        return $this->namedtag->getString('type');
    }

    /**
     * @param HCFPlayer $player
     */
    public function spawnText(HCFPlayer $player): void
    {
        foreach ($this->text as $number => $floating) {
            if ($floating instanceof FloatingTextParticle) {
                foreach ($floating->encode() as $decode) {
                    $floating->setInvisible(false);
                    $player->dataPacket($decode);
                }
            }
        }
    }

    /**
     * @param int $currentTick
     * @return bool
     */
    public function onUpdate(int $currentTick): bool
    {
        switch ($this->getType()) {
            case 'Team':
                $data = [];
                foreach (HCFLoader::getFactionManager()->getAllFactions() as $fName) {
                    $data[] = $fName;
                }

                arsort($data);

                if (count($this->text) == 0) {
                    $this->text[] = new FloatingTextParticle(new Vector3($this->x, ($this->y + 1.5) + 0.50, $this->z), TextFormat::BOLD . TextFormat::AQUA . '#1 Team');
                    $this->text[] = new FloatingTextParticle(new Vector3($this->x, ($this->y + 1.5) + 0.25, $this->z), $data[0]);
                    $this->text[] = new FloatingTextParticle(new Vector3($this->x, ($this->y + 1.5), $this->z), TextFormat::GRAY . '/f top');
                }
                break;
            case 'Kills':
                $kills = [];
                $data = (new Config(HCFLoader::getInstance()->getDataFolder() . 'kills.yml', Config::YAML))->getAll();
                foreach ($data as $playerName => $points) {
                    $kills[] = $playerName;
                }

                arsort($kills);
                if (count($this->text) == 0) {
                    $this->text[] = new FloatingTextParticle(new Vector3($this->x, ($this->y + 1.5) + 0.50, $this->z), TextFormat::BOLD . TextFormat::GREEN . '#1 Kills');
                    $this->text[] = new FloatingTextParticle(new Vector3($this->x, ($this->y + 1.5) + 0.25, $this->z), $kills[0]);
                    $this->text[] = new FloatingTextParticle(new Vector3($this->x, ($this->y + 1.5), $this->z), TextFormat::GRAY . '/leaderboards kill');
                }
                break;
            case 'KD':
                $kd = [];
                foreach ((new Config(HCFLoader::getInstance()->getDataFolder() . 'kills.yml', Config::YAML))->getAll() as $playerName => $kills) {
                    $kd[] = $playerName;
                }

                arsort($kd);

                if (count($this->text) == 0) {
                    $this->text[] = new FloatingTextParticle(new Vector3($this->x, ($this->y + 1.5) + 0.50, $this->z), TextFormat::BOLD . TextFormat::GOLD . '#1 in KDR');
                    $this->text[] = new FloatingTextParticle(new Vector3($this->x, ($this->y + 1.5) + 0.25, $this->z), $kd[0]);
                    $this->text[] = new FloatingTextParticle(new Vector3($this->x, ($this->y + 1.5), $this->z), TextFormat::GRAY . '/leaderboards kd');
                }
                break;
        }
        return parent::onUpdate($currentTick); // TODO: Change the autogenerated stub
    }
}