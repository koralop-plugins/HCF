<?php

namespace Koralop\HCF\modules\logout\entity;

use Koralop\HCF\HCFLoader;
use Koralop\HCF\HCFPlayer;
use pocketmine\entity\Zombie;
use pocketmine\event\entity\EntityDamageByEntityEvent;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\nbt\NBT;
use pocketmine\nbt\tag\DoubleTag;
use pocketmine\nbt\tag\ListTag;
use pocketmine\nbt\tag\StringTag;
use pocketmine\utils\TextFormat;

/**
 * Class LogoutEntity
 * @package Koralop\HCF\modules\logout\entity
 */
class LogoutEntity extends Zombie
{

    /** @var int */
    protected int $time = 30;

    /** @var string */
    protected string $playerName;

    /** @var array */
    protected array $items = [];

    /**
     * @param HCFPlayer $player
     */
    public function setPlayer(HCFPlayer $player): void
    {
        $this->playerName = $player->getName();

        $this->setNameTagVisible(true);
        $this->setNameTag(TextFormat::RED . $player->getName() . TextFormat::GRAY . '(Combat-Logger)');

        $this->items = $player->getInventory()->getContents();

        $this->getArmorInventory()->setHelmet($player->getArmorInventory()->getHelmet());
        $this->getArmorInventory()->setChestplate($player->getArmorInventory()->getChestplate());
        $this->getArmorInventory()->setLeggings($player->getArmorInventory()->getLeggings());
        $this->getArmorInventory()->setBoots($player->getArmorInventory()->getBoots());
    }

    /**
     * @param int $currentTick
     * @return bool
     */
    public function onUpdate(int $currentTick): bool
    {
        $player = HCFLoader::getInstance()->getServer()->getPlayer($this->playerName);

        if ($player instanceof HCFPlayer) {
            $this->flagForDespawn();
            return false;
        }
        if ($this->time == 0) {
            $this->flagForDespawn();
            return false;
        }
        $this->time--;
        return parent::onUpdate($currentTick); // TODO: Change the autogenerated stub
    }

    /**
     * @param EntityDamageEvent $source
     */
    public function attack(EntityDamageEvent $source): void
    {
        $f = HCFLoader::getFactionManager();
        if ($source instanceof EntityDamageByEntityEvent) {
            $damager = $source->getDamager();
            if ($damager instanceof HCFPlayer) {
                if ($damager->inFaction()) {
                    if ($f->infaction($this->playerName)) {
                        if ($f->getFactionByPlayer($this->playerName) == $damager->getFactionName()) {
                            $source->setCancelled(true);
                        }
                    }
                }
                if ($this->getHealth() >= $source->getFinalDamage()) {
                    parent::attack($source);
                }

                $spawn = HCFLoader::getInstance()->getServer()->getDefaultLevel()->getSpawnLocation();
                $nbt = HCFLoader::getInstance()->getServer()->getOfflinePlayerData($this->playerName);

                $nbt->setTag(new ListTag('Inventory', [], NBT::TAG_Compound));
                $nbt->setTag(new ListTag('Pos',
                [
                    new DoubleTag('', $spawn->x),
                    new DoubleTag('', $spawn->y),
                    new DoubleTag('', $spawn->z)
                ], NBT::TAG_Double));

                $nbt->setTag(new StringTag('Level', HCFLoader::getInstance()->getServer()->getDefaultLevel()->getFolderName()));

                HCFLoader::getInstance()->getServer()->saveOfflinePlayerData($this->playerName, $nbt);
                foreach ($this->items as $number => $item) {
                    $this->getLevel()->dropItem($this, $item);
                }
                $this->flagForDespawn();
            }
        }
    }
}